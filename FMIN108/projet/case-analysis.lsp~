(defun case-analysis (expr env)
	(if (atom expr)
		;CAS ATOM
		(if (constantp expr)
			;cas litteral
			(format t "litteral ~s ~%" expr);%->saut Ã  la ligne

			(if (find expr env)
				;cas variable, def dans l'environnement
				(format t "variable environnement ~s ~%" expr)

				;cas erreur
				(error "~s variable inconnue" expr)
			)
		)	
	
		;CAS FONCTION

		;lie les variables
		(let ((fun (car expr)) (args (cdr expr)))
			(cond 
				((consp fun)
				;cas des lambda fonction
					((if (eq fun lambda))
						(format t "fonction lambda : ~s ~%" fun)
					)
				)	
	
;; 				((symbolp fun)
;; 				;cas des fausses fonctions
;; 				(format t "fausse fonction : ~s ~%" fun)
;; 				)
;; 
;; 				;cas d'erreur
;; 				( t
;; 				(format t "fonction non reconnu : ~s ~%" expr)
;; 				)

			)
		)
	)	
)
