;declaration des registres
;+initiailisation


;implementation de la vm
;construit les elements de la vm
(defun make-vm(nom-vm taille)
  (progn 
    (setf (get nom-vm ':RO) '1)
    ;(setf mem (make-array (list taille):initial-element (list 'NOP)))
    ;(setf 'name nom) 
    ;(setf 'BP 0)
    ;(setf 'SP 0)
    ;(setf 'R0 0)
    ;(setf 'R1 0)
    )
  )

(defun exec-vm(instruction)
  ;analyse par cas des instructions
  ;(case (car intruction)
  ;  (move ...)
  ;  (push ...)
  )

;charge le code dans le registre d'instruction
;vm : la vm que l'on manipule
;code : liste plate des intructions 
(defun load-vm(vm code)
  (loop for instruction in code
	do
	;instru->(move ('1 ) R0)
	(ecrire-mem mem (get-registre 'SP) instruction)
	;incremente SP
	(set-registre vm 'SP (+ (get-registre vm 'SP) 1))
	)
  )

;recupere la valeur d'un registre
(defun get-registre(registre)
  (get vm registre))

;ecrit dans un registre
(defun set-registre(vm registre valeur)
  (setf (get vm registre) valeur))

;lit dans la memoire de la vm
(defun lire-mem(vm adresse)
  (aref vm  adresse))

;ecrit dans le memoire de la vm
(defun ecrire-mem(vm adresse valeur)
  (setf (aref vm adresse) valeur))

;affiche la memoire de la machine virtuel
(defun affiche-mem(vm)
  (loop for cellule in mem
	do
	;instru->(move ('1 ) R0)
	(format t "cellule : ~s ~%" cellule)
	(break)	)
  )
