;;----------------------------------------------------------------------------------------------
;; Warlogo: The Team to be defined...
;;
;; Warlogo...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; EXPLORER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;beliefs 
 ;timer 0
 ;lCandidats
 ;listeAgent

;renvoi les coordonnées polaire de la cible pour le tireur
to-report position-polaire [cible source]
  let xA (item 1 cible) * (cos item 0 cible);r cos teta
  let yA (item 1 cible) * (sin item 0 cible);r sin teta

  let xB (item 1 source) * (cos item 0 source);r cos teta
  let yB (item 1 source) * (sin item 0 source);r sin teta

  let X (abs xA + abs xB)
  let Y (abs yA + abs yB)
  let res-distance sqrt ((X * X) + (Y * Y))
  let res-angle atan  Y X

  let lres []
  set lres lput res-angle lres
  set lres lput res-distance lres
  
  report lres 
     
end

;calcul position enssemble agent
to-report calcul-position-agent [lAgent]
  let lres []
  
  let cible []
  set cible lput -90 cible
  set cible lput 0 cible
  
  ;boucle sur liste agent
  foreach lAgent [
    let nPos position-polaire cible ?
    set lres lput nPos lres      
  ]
    
  report lres
  
end

 
 
to-report explorer-t1-action
  if ctask = "initial-state" [ 
    set ctask "explorer-explorer"
    set beliefs lput 0 beliefs
    set beliefs lput [] beliefs
    set beliefs lput nobody beliefs
  ];definit etat initial
  
  traitement-fils-message
  
  set label ctask
  report runresult ctask
end

to traitement-fils-message
  

    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg ;; pour récupérer l'émetteur du message..
      let head get-heading-to-sender msg ;; la direction dans laquelle se trouve l'émetteur du message
      let dist get-distance-to-sender msg ;; la distance qui sépare l'émetteur du récepteur du message
                                          ;; faire l'action que l'on désire à partir du performatif du message et son contenu
      
      ;candidat accepte
      if  performatif = "propose"[ 
        let lCandidat item 1 beliefs
        set lCandidat lput msg lCandidat
        set beliefs replace-item 1 beliefs lCandidat 
      ]
      ;candidat refuse
      if  performatif = "refuse"[]
    ]
    
end


;j'ai reperer base ennemi
;lance appel d'offre
to-report appel-offre
  
   broadcast-message get-rocket-launchers "cfp" ["1"]
           
    ;attend 2 tick avt de traiter les reponse
    ;idle
    ;appel-offre
    ifelse item 0 beliefs < 5 [ 
      let my-timer item 0 beliefs
      set my-timer my-timer + 1
      set beliefs replace-item 0 beliefs my-timer
      set ctask "appel-offre"
      report "idle"
    ][
    ;time up
    ;idle
    ;appel-offre-rep
    set ctask "appel-offre-rep"
    report "idle"
    ]
 
  
end

to-report appel-offre-rep
      
    ;traite reponse
    ;idle
    ;rien-faire-explorer
  let lCandidat item 1 beliefs
  set beliefs replace-item 0 beliefs 0
  
  ;tri les candidats par energie/distance 
  
  ;envoie accept-proposal au 3 premier et refuse-proposal au reste
  let compt 0
  (foreach lCandidat [
    ifelse compt < 3 [
      
      let enemy-base one-of percepts with [is-base? self and is-my-enemy? myself]
      set heading towards enemy-base
      
      ;position cible
      let A []
      set A lput get-heading A
      set A lput distance enemy-base A

      
      ;position tireur
      let B []     
      set B lput (get-heading-to-sender ?) B
      set B lput get-distance-to-sender ? B

      
      ;recupere position cible depuis tireur
      let posEnnemi position-polaire A B
            
      ;initialise msg reponse
      let contenuMsg []
      set contenuMsg lput "attack" contenuMsg
      set contenuMsg lput posEnnemi contenuMsg
      
      reply ? "accept-proposal" contenuMsg
      ;set beliefs item 2 lput get-sender ?  beliefs item 2
    ]    
    [ 
      reply ? "refuse-proposal" ["attack"]
      set lCandidat remove ? lCandidat
    ]
    
    set compt compt + 1
  ])
  
  set ctask "rien-faire-explorer"
  report "idle"
  
end

to-report explorer-explorer
  ;base ennemi reperer
  ;idle
  ;appel-offre
  let enemy-base one-of percepts with [is-base? self and is-my-enemy? myself]
  if enemy-base != nobody[ 
    set ctask "appel-offre"
    report "idle"
  ]
  
  set ctask "explorer-explorer"
  report "move"
end

to-report rien-faire-explorer
  ;show item 1 beliefs
  set ctask "rien-faire-explorer"
  report "idle"
end

to-report rien-faire-explorer1
  set ctask "rien-faire-explorer1"
  report "idle"
end

to-report find-food 
  
  let enemy-base one-of percepts with [is-base? self and is-my-enemy? myself]
  let my-base one-of get-bases

  
 
  let spotted-food percepts with [is-food? self]
  let hit-food spotted-food with [is-colliding? myself]
  
  ;agent touche peut attaper nourriture
  ;prend nourriture
  ;back-to-bases
  if any? hit-food [
      set ctask "back-to-bases"
      report list "take" one-of hit-food
  ]
  
  ;agent perçoit nourriture
  ;move vers nourriture
  ;find-food
  ifelse any? spotted-food [
    let closest min-one-of spotted-food [distance myself]
    ifelse headed-towards? closest 
    [
      set ctask "find-food"
      report "move"
    ] 
    [
      set-heading closest
      set ctask "find-food"
      report "move"
    ]
  ]
  ;agent perçoit pas nourriture
  ;move alétoirement
  ;find-food
  [
    ifelse (random 5 = 1)
    [ 
      set-random-heading 
      set ctask "find-food"
      report "move"
    ]
    [
      set ctask "find-food"
      report "move"
    ]
  ]
  

  
end

to-report back-to-bases
  
  ;percoit nourriture et sac non plein
  ;move vers nourriture
  ;find-food 
  let spotted-food percepts with [is-food? self]
  if any? spotted-food and not full-bag? 
  [
    set-heading min-one-of spotted-food [distance myself]
    set ctask "find-food"
    report "move"
  ]
  
  ;si arrivé à la base
  ;give
  ;find-food
  ifelse any? get-bases with [is-colliding? myself] 
  [
    set ctask "find-food"
    report list "give" min-one-of get-bases [distance myself]
  ]
  ;sinon
  ;move ma base
  ;back-to-bases
  [
    set-heading min-one-of get-bases [distance myself]
    set ctask "back-to-bases"
    report "move"
  ] 
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ROCKET-LAUNCHER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;beliefs 
 ;cible amis
 ;cible ennemi
 ;manager

to-report rocket-launcher-t1-action
  
  if ctask = "initial-state" [ 
    set ctask "rien-faire-rocket-lancher"
    set beliefs lput nobody beliefs
    set beliefs lput nobody beliefs
    set beliefs lput nobody beliefs
  ];definit etat initial
  
  ;reflexe
  ; if blocked? [ set-random-heading ]
  ; let ennemy-rocket-launcher one-of percepts with [is-rocket-launcher? self and is-my-enemy? myself]
  ; if (ennemy-rocket-launcher != nobody) and (get-energy self < 2990)  [  set ctask "fuir"]
  
  ;message
  ;traitement-fils-message-rocket-laucher
  ;envoie-message-rocker-laucher
  
  let cibleA item 0 beliefs
  let cibleE item 1 beliefs
  let manager item 2 beliefs
  
  set label ctask
  ;set label self
  report runresult ctask
  
end

to-report repondre-appel-offre
  
    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg ;; pour récupérer l'émetteur du message..
      let head get-heading-to-sender msg ;; la direction dans laquelle se trouve l'émetteur du message
      let dist get-distance-to-sender msg ;; la distance qui sépare l'émetteur du récepteur du message
      
      if performatif = "cfp"[
        
        reply msg "propose" []
      ]
      
      if performatif = "accept-proposal" and item 0 contenu = "attack"
      [

        set-heading head - 20
        
        show "s'engage avec "
        show emetteur
               
        set beliefs lput emetteur beliefs
        
        set ctask "avancer"
        report "move"
      ]
    ]
    
    set ctask "repondre-appel-offre"
    report "idle"
    
end

to-report avancer
  let cible item 0 beliefs
  if cible != nobody [
    ifelse distance cible < 10 
    [
      set ctask "attack"
      report "idle"
    ]
    [
      set heading towards cible
    ]
  ]
  set ctask "avancer"
  report "move"
end

to-report rien-faire-rocket-lancher

  ;recoit une offre
  ;idle
  ;repondre appel-offre
  if not empty? incoming-queue [
    let msg get-message
    let performatif get-performative msg 
    if performatif = "cfp"[
      
      reply msg "propose" []
      
      set ctask "repondre-appel-offre"
      report "idle"
    ]
  ]
  
  ;defaut
  ;idle
  ;rien-faire-rocket-lancher
  set ctask "rien-faire-rocket-lancher"
  report "idle"
end
to-report fuir
  
let my-ennemy-rocket-launcher one-of percepts with [is-rocket-launcher? self and is-my-enemy? myself]

  if my-ennemy-rocket-launcher != nobody and headed-towards? my-ennemy-rocket-launcher [ 
    set-heading get-heading + 90
    set ctask "fuir"
    report "move" 
    ]
  
  set ctask "trouver-vivre"
  report "move"
  
  
 ; set ctask "fuir"
   
end

to-report trouver-vivre
 
  let spotted-food percepts with [is-food? self]
  let hit-food spotted-food with [is-colliding? myself]
  
  ;agent touche peut attaper nourriture
  ;prend nourriture
  ;back-to-bases
  if any? hit-food [
      set ctask "patrouiller"
      report "eat"
  ]
  
  ;agent perçoit nourriture
  ;move vers nourriture
  ;find-food
  ifelse any? spotted-food [
    let closest min-one-of spotted-food [distance myself]
    ifelse headed-towards? closest 
    [
      set ctask "trouver-vivre"
      report "move"
    ] 
    [
      set-heading closest
      set ctask "trouver-vivre"
      report "move"
    ]
  ]
  ;agent perçoit pas nourriture
  ;move alétoirement
  ;find-food
  [
    ifelse (random 5 = 1)
    [ 
      set-heading (heading + 0.1 * ((random-float 2) - 1))
      set ctask "trouver-vivre"
      report "move"
    ]
    [
      set ctask "trouver-vivre"
      report "move"
    ]
  ]
end

to-report explore
  set label "explore"
  ;perçoit ennemi
  ;idle
  ;attack
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "attack"
    report "idle"
  ]
  
  
  ;sinon
  ;move
  ;explore
  set-random-heading 
  set ctask "explore"
  report "move"
    
end

to-report patrouiller
  
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "defendre"
    report "idle"
  ]
  
 let my-base min-one-of get-bases [distance myself]
 if distance my-base > 10
 [
   set-heading my-base
   set ctask "patrouiller"
   report "eat"
 ]
 
   ifelse blocked? 
   [
     set-random-heading
   ] 
   [ 
     if (random 5 = 1) 
     [
       set-heading (heading + 0.1 * ((random-float 2) - 1))
     ]
     set ctask "patrouiller"
     report "move"
   ]
   
   set ctask "patrouiller"
   report "move"
end

to-report defendre
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy?
 myself and is-rocket-launcher? myself or is-base? myself] [get-energy self]
  
  ;plus de rocket et energie suffisante
  ;build-rocket
  ;attack
  if (get-rocket-number = 0 and get-energy self > rocket-cost) 
  [
    report "build-rocket"
  ]
  
  ;perçoit enemi et rocket > 0
  ;launch-rocket
  ;attack
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "defendre"
    report list "launch-rocket" towards target
  ]
  
  ;perçoit plus ennemi
  ;move 
  ;explore
  set ctask "patrouiller"
  report "move"

  
end


to-report attack
  
  
  
  
  
    
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy?
 myself and is-rocket-launcher? myself or is-base? myself] [get-energy self]
  
  ;plus de rocket et energie suffisante
  ;build-rocket
  ;attack
  if (get-rocket-number = 0 and get-energy self > rocket-cost) 
  [
    report "build-rocket"
  ]
  
  ;perçoit enemi et rocket > 0
  ;launch-rocket
  ;attack
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "attack"
    report list "launch-rocket" towards target
  ]
  
  ;perçoit plus ennemi
  ;move 
  ;explore
  
  set ctask "explore"
  report "move"

end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; BASE BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;si attquer appeler demande autant de lauch-rocket que d'attaquant
to-report base-t1-action
  while [not empty? incoming-queue] 
    [let msg get-message
      show (sentence "received message: " msg)]
  ifelse energy > 5 * rocket-launcher-cost and energy > 5 * explorer-cost [
    ifelse random 20 > 5 
    [report "build-rocket-launcher"]
    [report "build-explorer"]
  ] [
    ifelse empty-bag? [
      report "idle"
    ] [
      report "eat"
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;