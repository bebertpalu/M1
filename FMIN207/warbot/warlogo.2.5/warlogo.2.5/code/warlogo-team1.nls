;;----------------------------------------------------------------------------------------------
;; Warlogo: The Team to be defined...
;;
;; Warlogo...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; EXPLORER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to-report explorer-t1-action
  if ctask = "initial-state" [ set ctask "avancer"];definit etat initial
  if ctask != "rien-faire" [ 
    traitement-fils-message
    envoie-message
  ]
  set label ctask
  report runresult ctask
end

to traitement-fils-message
  

    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg ;; pour récupérer l'émetteur du message..
      let head get-heading-to-sender msg ;; la direction dans laquelle se trouve l'émetteur du message
      let dist get-distance-to-sender msg ;; la distance qui sépare l'émetteur du récepteur du message
                                          ;; faire l'action que l'on désire à partir du performatif du message et son contenu
      
                                          ;; pour répondre à un message faire:
                                          ;; reply msg "action" "contenu"
       ]
    
end

to envoie-message
  
  ;j'ai reperer base ennemi
  ;lance appel d'offre
   broadcast-message get-rocket-launchers "cfp" ["1"]
   
  ;attend qlq seconde
  ;timer()
  
  ;recupere les reponses
    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg 
      let head get-heading-to-sender msg 
      let dist get-distance-to-sender msg
      
      let lCandidat []
      
      if  performatif = "propose"[
        ;rajoute le candidat
        set lCandidat lput msg lCandidat
      ]
      if  performatif = "refuse"[]
      
      ;tri les candidats par energie/distance      
      
      ;envoie accept-proposal au n premier et refuse-proposal au reste
      
      ;attend les retours inform-done/ faillur
      
    ]
  ;msg : signal une base ennemi
  ;type/destinataire : broadcast rocket-lancher
  let enemy-base one-of percepts with [is-base? self and is-my-enemy? myself]
  if enemy-base != nobody
    [
     
      show "broacast(seen-base)"
      set ctask "rien-faire"
    ]
   
 
  
end

to-report avancer
  set ctask "avancer"
  report "move"
end

to-report rien-faire
  set ctask "rien-faire"
  report "idle"
end

to-report find-food 
  
  let enemy-base one-of percepts with [is-base? self and is-my-enemy? myself]
  let my-base one-of get-bases

  
 
  let spotted-food percepts with [is-food? self]
  let hit-food spotted-food with [is-colliding? myself]
  
  ;agent touche peut attaper nourriture
  ;prend nourriture
  ;back-to-bases
  if any? hit-food [
      set ctask "back-to-bases"
      report list "take" one-of hit-food
  ]
  
  ;agent perçoit nourriture
  ;move vers nourriture
  ;find-food
  ifelse any? spotted-food [
    let closest min-one-of spotted-food [distance myself]
    ifelse headed-towards? closest 
    [
      set ctask "find-food"
      report "move"
    ] 
    [
      set-heading closest
      set ctask "find-food"
      report "move"
    ]
  ]
  ;agent perçoit pas nourriture
  ;move alétoirement
  ;find-food
  [
    ifelse (random 5 = 1)
    [ 
      set-random-heading 
      set ctask "find-food"
      report "move"
    ]
    [
      set ctask "find-food"
      report "move"
    ]
  ]
  

  
end

to-report back-to-bases
  
  ;percoit nourriture et sac non plein
  ;move vers nourriture
  ;find-food 
  let spotted-food percepts with [is-food? self]
  if any? spotted-food and not full-bag? 
  [
    set-heading min-one-of spotted-food [distance myself]
    set ctask "find-food"
    report "move"
  ]
  
  ;si arrivé à la base
  ;give
  ;find-food
  ifelse any? get-bases with [is-colliding? myself] 
  [
    set ctask "find-food"
    report list "give" min-one-of get-bases [distance myself]
  ]
  ;sinon
  ;move ma base
  ;back-to-bases
  [
    set-heading min-one-of get-bases [distance myself]
    set ctask "back-to-bases"
    report "move"
  ] 
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ROCKET-LAUNCHER BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report rocket-launcher-t1-action
 if ctask = "initial-state" [ set ctask "rien-faire-rocket-lancher"];definit etat initial
  
  ;reflexe
 ; if blocked? [ set-random-heading ]
 ; let ennemy-rocket-launcher one-of percepts with [is-rocket-launcher? self and is-my-enemy? myself]
 ; if (ennemy-rocket-launcher != nobody) and (get-energy self < 2990)  [  set ctask "fuir"]
  
  ;message
  traitement-fils-message-rocket-laucher
  envoie-message-rocker-laucher
  
  set label ctask
  ;set label self
  report runresult ctask

end

to traitement-fils-message-rocket-laucher
  

  
   
  
    while [not empty? incoming-queue] [
      let msg get-message
      let performatif get-performative msg 
      let contenu get-content msg
      let emetteur get-sender msg ;; pour récupérer l'émetteur du message..
      let head get-heading-to-sender msg ;; la direction dans laquelle se trouve l'émetteur du message
      let dist get-distance-to-sender msg ;; la distance qui sépare l'émetteur du récepteur du message
      
          
    
      reply msg "ack" []
      show performatif
      show item 0 contenu
      show emetteur
      show head
      show dist
      if performatif = "seen" and item 0 contenu = "base" [set ctask "attack"]
       ]
    
end

to envoie-message-rocker-laucher
  
  
end

to-report rien-faire-rocket-lancher
  set ctask "rien-faire"
  report "idle"
end
to-report fuir
  
let my-ennemy-rocket-launcher one-of percepts with [is-rocket-launcher? self and is-my-enemy? myself]

  if my-ennemy-rocket-launcher != nobody and headed-towards? my-ennemy-rocket-launcher [ 
    set-heading get-heading + 90
    set ctask "fuir"
    report "move" 
    ]
  
  set ctask "trouver-vivre"
  report "move"
  
  
 ; set ctask "fuir"
   
end

to-report trouver-vivre
 
  let spotted-food percepts with [is-food? self]
  let hit-food spotted-food with [is-colliding? myself]
  
  ;agent touche peut attaper nourriture
  ;prend nourriture
  ;back-to-bases
  if any? hit-food [
      set ctask "patrouiller"
      report "eat"
  ]
  
  ;agent perçoit nourriture
  ;move vers nourriture
  ;find-food
  ifelse any? spotted-food [
    let closest min-one-of spotted-food [distance myself]
    ifelse headed-towards? closest 
    [
      set ctask "trouver-vivre"
      report "move"
    ] 
    [
      set-heading closest
      set ctask "trouver-vivre"
      report "move"
    ]
  ]
  ;agent perçoit pas nourriture
  ;move alétoirement
  ;find-food
  [
    ifelse (random 5 = 1)
    [ 
      set-heading (heading + 0.1 * ((random-float 2) - 1))
      set ctask "trouver-vivre"
      report "move"
    ]
    [
      set ctask "trouver-vivre"
      report "move"
    ]
  ]
end

to-report explore
  set label "explore"
  ;perçoit ennemi
  ;idle
  ;attack
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "attack"
    report "idle"
  ]
  
  
    ;lire msg
  while [not empty? incoming-queue] [
    let msg get-message
    
    ;base ennemi decouverte
    ;move to base ennemi
    ;explore
    if  get-performative msg = "seen-base" 
    [
      set-heading get-heading-to-sender msg
      set ctask "explore"
      report "move"
    ]
  ]
 
  ;sinon
  ;move
  ;explore
  set-random-heading 
  set ctask "explore"
  report "move"
    
end

to-report patrouiller
  
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy? myself] [get-energy self]
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "defendre"
    report "idle"
  ]
  
 let my-base min-one-of get-bases [distance myself]
 if distance my-base > 10
 [
   set-heading my-base
   set ctask "patrouiller"
   report "eat"
 ]
 
   ifelse blocked? 
   [
     set-random-heading
   ] 
   [ 
     if (random 5 = 1) 
     [
       set-heading (heading + 0.1 * ((random-float 2) - 1))
     ]
     set ctask "patrouiller"
     report "move"
   ]
   
   set ctask "patrouiller"
   report "move"
end

to-report defendre
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy?
 myself and is-rocket-launcher? myself or is-base? myself] [get-energy self]
  
  ;plus de rocket et energie suffisante
  ;build-rocket
  ;attack
  if (get-rocket-number = 0 and get-energy self > rocket-cost) 
  [
    report "build-rocket"
  ]
  
  ;perçoit enemi et rocket > 0
  ;launch-rocket
  ;attack
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "defendre"
    report list "launch-rocket" towards target
  ]
  
  ;perçoit plus ennemi
  ;move 
  ;explore
  set ctask "patrouiller"
  report "move"

  
end

to-report attack
  let target min-one-of percepts with [not is-rocket? self and not is-food? self and is-my-enemy?
 myself and is-rocket-launcher? myself or is-base? myself] [get-energy self]
  
  ;plus de rocket et energie suffisante
  ;build-rocket
  ;attack
  if (get-rocket-number = 0 and get-energy self > rocket-cost) 
  [
    report "build-rocket"
  ]
  
  ;perçoit enemi et rocket > 0
  ;launch-rocket
  ;attack
  if (target != nobody and get-rocket-number > 0) 
  [
    set ctask "attack"
    report list "launch-rocket" towards target
  ]
  
  ;perçoit plus ennemi
  ;move 
  ;explore
  
  set ctask "explore"
  report "move"

end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; BASE BEHAVIOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;si attquer appeler demande autant de lauch-rocket que d'attaquant
to-report base-t1-action
  while [not empty? incoming-queue] 
    [let msg get-message
      show (sentence "received message: " msg)]
  ifelse energy > 5 * rocket-launcher-cost and energy > 5 * explorer-cost [
    ifelse random 20 > 5 
    [report "build-rocket-launcher"]
    [report "build-explorer"]
  ] [
    ifelse empty-bag? [
      report "idle"
    ] [
      report "eat"
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;